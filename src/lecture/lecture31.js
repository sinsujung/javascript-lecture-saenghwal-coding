/**
 * 참조
 * > 복제
 * ---------------------------------------------------------------------
 * 전자화된 시스템의 가장 중요한 특징은 복제다. 현실의 사물과 다르게 전자화된
 * 시스템 위의 데이터를 복제하는데는 비용이 거의 드지 않는다.
 * 바로 이러한 특징이 소프트웨어를 기존의 산업과 구분하는 가장 큰 특징일 것이
 * 다.
 */
var a = 1;
var b = a;
b = 2;
console.log(a); // 1

/**
 * 예외 상황 (같은 id 객체를 참조한다.)
 */
var a = {'id': 1};
var b = a;
b.id = 2;
console.log(a.id); // 2

/**
 * 위 코드의 주인공은 아래와 같다.
 */
b.id = 2;
System.out.println(a.id);

// 만약 b에 id를 새로운 객체로 만들어주면 a의 값은 1이 출력된다.
b = {'id':2};
console.log(a.id); // 1

//이 이야기는 b라는 객체는 더이상 a의 객체가 아닌 다른 객체를 바라보게 된다는 이야기다.

/**
 * 그럼 일종의 변수할당이라고 할 수 있는 메소드의 매개변수는 어떻게 동작하는가를 살펴보자.
 * 조금 복잡하므로 꼼꼼하게 살펴봐야 한다.
 */

// 원시 데이터 타입을 인자로 넘겼을 때 동작 모습
var a = 1;
function func (b) { // b = a 가 되기 때문에 b에 어떤 값을 대입하더라도 b는 1이 된다.
    b = 2;
}
func (a); // b = a 임을 명시
console.log(a); // 1

// 참조 데이터 타입을 인자로 넘겼을 때 동작 모습
var a = {'id': 1};
function func (b) {
    b = {'id': 2};
}
func(a);
console.log(a.id); // 1

/**
 * 위 코드의 경우 함수 func의 파라미터 b로 전달된 값을 객체 a 이다.
 * (b = a) b를 새로운 객체로 대체하는 것은 (b = {'id':2})
 * b가 가르키는 객체를 변경하는 것이기 때문에 객체 a에 영향을 주지 않는다.
 * 하지만 아래 코드는 다르다.
 */
var a = {'id': 1};
function func(b) {
    b.id = 2;
}
func(a);
console.log(a.id); // 2

/**
 * 위 코드를 보면
 * 파라미터 b는 객체 a의 레퍼런스다. 이 값의 속성을 바꾸면
 * 그 속성이 소속된 객체를 대상으로 수정작업을 한 것이 되기 때문에
 * b의 변경은 a에도 영향을 미치게 된다.
 */
